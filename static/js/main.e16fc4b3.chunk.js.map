{"version":3,"sources":["components/TodoList/TodoList.js","serviceWorkerRegistration.js","index.js"],"names":["TodoItems","props","items","entries","map","i","onClick","key","del","text","className","duration","easing","TodoList","useState","tasks","setTasks","input","setInput","useEffect","get","then","value","onSubmit","event","preventDefault","date","Date","now","concat","set","placeholder","onChange","target","type","filtered","filter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","destination","document","querySelector","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.e16fc4b3.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { set, get } from 'idb-keyval';\nimport FlipMove from \"react-flip-move\";\nimport \"./TodoList.css\";\n\n/*  Component returning unordered list of inputted items;\n    each item can be deleted by clicking on it.\n    props:\n      a) del: function deleting item from the list\n      b) entries: array of items to render */\nfunction TodoItems(props) {\n    const del = (key) => props.del(key);\n\n    const items = props.entries.map(i => \n        <li onClick={() => del(i.key)}\n            key={i.key}>{i.text}</li>);\n\n    return (\n      <div className=\"itemList\">\n          <ul>\n            <FlipMove duration={250} easing=\"ease-out\">\n              {items}\n            </FlipMove>\n          </ul>\n      </div>  \n    );\n}\n\n// Main component of the app\nfunction TodoList() {\n    const [tasks, setTasks] = useState([]);                    // array of items to list with their identification keys\n    const [input, setInput] = useState(\"\");                    // current input\n\n    useEffect(() => {                                          // loading list from IndexedDB on page load\n        get(\"tasks\").then(value => setTasks(value ?? []));\n    }, []); \n\n    const updateTasks = (event) => {                           // adding new item to the list\n        event.preventDefault();\n        if(input !== \"\") {\n            const date = Date.now();\n            setTasks(tasks.concat({\n                text: input,\n                key: date\n            }))\n            set(\"tasks\", tasks.concat({\n                text: input,\n                key: date\n            }));\n        }   \n        setInput(\"\");\n    };\n\n    const deleteJob = (key) => {                                // deleting an item using its key  \n        const filtered = tasks.filter(i => i.key !== key);\n        setTasks(filtered);\n        set(\"tasks\", filtered);\n    }\n\n    return (\n        <div className=\"todoListMain\">\n            <div className=\"header\">\n            <form onSubmit={updateTasks}>\n                <input value={input}\n                        placeholder=\"enter task\" \n                        onChange={(event) => {setInput(event.target.value)}}>\n                </input>\n                <button type=\"submit\">Add</button>\n            </form>\n            </div>\n            <TodoItems entries={tasks} del={deleteJob} />\n        </div>        \n    );   \n}\n \nexport default TodoList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport TodoList from \"./components/TodoList/TodoList\";\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\nconst destination = document.querySelector(\"#container\");\n\nReactDOM.render(\n    <div>\n        <TodoList/>\n    </div>,\n    destination\n);\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}