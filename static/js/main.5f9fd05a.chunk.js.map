{"version":3,"sources":["components/TodoList/TodoItems.js","components/TodoList/TodoList.js","serviceWorkerRegistration.js","index.js"],"names":["TodoItems","props","items","entries","map","i","onClick","key","del","text","className","duration","easing","TodoList","useState","tasks","setTasks","input","setInput","onSubmit","event","preventDefault","concat","Date","now","value","placeholder","onChange","target","type","filtered","filter","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","destination","document","querySelector","ReactDOM","render","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"+LAqBeA,MAlBf,SAAmBC,GACf,IAEMC,EAAQD,EAAME,QAAQC,KAAI,SAAAC,GAAC,OAC7B,oBAAIC,QAAS,kBAHJC,EAGcF,EAAEE,IAHRN,EAAMO,IAAID,GAAnB,IAACA,GAGT,SACiBF,EAAEI,MAAVJ,EAAEE,QAEf,OACE,qBAAKG,UAAU,WAAf,SACI,6BACE,cAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,WAAhC,SACGV,SCyBAW,MApCf,SAAkBZ,GAAQ,IAAD,EACKa,mBAAS,IADd,mBACdC,EADc,KACPC,EADO,OAEKF,mBAAS,IAFd,mBAEdG,EAFc,KAEPC,EAFO,KAoBrB,OACI,sBAAKR,UAAU,eAAf,UACI,qBAAKA,UAAU,SAAf,SACA,uBAAMS,SAnBM,SAACC,GACjBA,EAAMC,iBACO,KAAVJ,GACCD,EAASD,EAAMO,OAAO,CAClBb,KAAMQ,EACNV,IAAKgB,KAAKC,SAGlBN,EAAS,KAWL,UACI,uBAAOO,MAAOR,EACNS,YAAY,aACZC,SAAU,SAACP,GAAWF,EAASE,EAAMQ,OAAOH,UAEpD,wBAAQI,KAAK,SAAb,sBAGJ,cAAC,EAAD,CAAW1B,QAASY,EAAOP,IAhBjB,SAACD,GACf,IAAMuB,EAAWf,EAAMgB,QAAO,SAAA1B,GAAC,OAAIA,EAAEE,MAAQA,KAC7CS,EAASc,UCRXE,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCvFjE,IAAMC,EAAcC,SAASC,cAAc,cAE3CC,IAASC,OACL,8BACI,cAAC,EAAD,MAEJJ,GDOG,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,kBAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,kBAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAC0B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAACC,GAClCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OChC/BuC,K","file":"static/js/main.5f9fd05a.chunk.js","sourcesContent":["import React from \"react\";\nimport FlipMove from \"react-flip-move\";\n\nfunction TodoItems(props) {\n    const del = (key) => props.del(key);\n\n    const items = props.entries.map(i => \n        <li onClick={() => del(i.key)}\n            key={i.key}>{i.text}</li>);\n\n    return (\n      <div className=\"itemList\">\n          <ul>\n            <FlipMove duration={250} easing=\"ease-out\">\n              {items}\n            </FlipMove>\n          </ul>\n      </div>  \n    );\n}\n\nexport default TodoItems;","import React, { useState } from \"react\";\nimport TodoItems from \"./TodoItems\";\n\nfunction TodoList(props) {\n    const [tasks, setTasks] = useState([]);\n    const [input, setInput] = useState(\"\");\n\n    const updateTasks = (event) => {\n        event.preventDefault();\n        if(input !== \"\") {\n            setTasks(tasks.concat({\n                text: input,\n                key: Date.now()\n            }))\n        }   \n        setInput(\"\");\n    };\n\n    const deleteJob = (key) => {\n        const filtered = tasks.filter(i => i.key !== key);\n        setTasks(filtered);\n    }\n\n    return (\n        <div className=\"todoListMain\">\n            <div className=\"header\">\n            <form onSubmit={updateTasks}>\n                <input value={input}\n                        placeholder=\"enter task\" \n                        onChange={(event) => {setInput(event.target.value)}}>\n                </input>\n                <button type=\"submit\">Add</button>\n            </form>\n            </div>\n            <TodoItems entries={tasks} del={deleteJob} />\n        </div>        \n    );   \n}\n \nexport default TodoList;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport TodoList from \"./components/TodoList/TodoList\";\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\nconst destination = document.querySelector(\"#container\");\n\nReactDOM.render(\n    <div>\n        <TodoList/>\n    </div>,\n    destination\n);\n\nserviceWorkerRegistration.register();"],"sourceRoot":""}